name: Build & Release

on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ master ]

jobs:

  style:
    name: Check Style
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt
          profile: minimal
          override: true

      - name: cargo fmt -- --check
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
  test:
    name: Test
    needs: [style]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        # build: [stable, beta, nightly]
        build: [stable, beta]
        include:
          - build: beta
            rust: beta
          # - build: nightly
          #   rust: nightly
          #   benches: true

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust || 'stable' }}
          profile: minimal
          override: true
      - name: Install ssl, musl & protobuf
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev musl-tools protobuf-compiler
      - name: Build debug
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: ${{ matrix.features }}
      - name: Test
        uses: actions-rs/cargo@v1
        env:
          RUST_TEST_THREADS: 1
        with:
          command: test
          args: ${{ matrix.features }} 
      - name: Test all benches
        if: matrix.benches
        uses: actions-rs/cargo@v1
        env:
          RUST_TEST_THREADS: 1
        with:
          command: test
          args: --benches ${{ matrix.features }}

  linux_x86_64:
    name: build and package
    needs: [test]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        platform:
          # Platforms that don't work:
          #
          # - sparc64-unknown-linux-gnu - cannot compile openssl-sys
          # - x86_64-unknown-illumos - weird error compiling openssl - "bin/sh: 1: granlib: not found"

          - os_name: FreeBSD-x86_64
            os: ubuntu-20.04
            target: x86_64-unknown-freebsd
            bin: precious
            name: precious-FreeBSD-x86_64.tar.gz
            skip_tests: true
          - os_name: Linux-x86_64
            os: ubuntu-20.04
            target: x86_64-unknown-linux-musl
            bin: precious
            name: precious-Linux-x86_64-musl.tar.gz
          - os_name: Linux-aarch64
            os: ubuntu-20.04
            target: aarch64-unknown-linux-musl
            bin: precious
            name: precious-Linux-aarch64-musl.tar.gz
          - os_name: Linux-arm
            os: ubuntu-20.04
            target: arm-unknown-linux-musleabi
            bin: precious
            name: precious-Linux-arm-musl.tar.gz
          - os_name: Linux-i686
            os: ubuntu-20.04
            target: i686-unknown-linux-musl
            bin: precious
            name: precious-Linux-i686-musl.tar.gz
            skip_tests: true
          - os_name: Linux-mips
            os: ubuntu-20.04
            target: mips-unknown-linux-musl
            bin: precious
            name: precious-Linux-mips.tar.gz
          - os_name: Linux-mipsel
            os: ubuntu-20.04
            target: mipsel-unknown-linux-musl
            bin: precious
            name: precious-Linux-mipsel.tar.gz
          - os_name: Linux-mips64
            os: ubuntu-20.04
            target: mips64-unknown-linux-muslabi64
            bin: precious
            name: precious-Linux-mips64.tar.gz
            skip_tests: true
          - os_name: Linux-mips64el
            os: ubuntu-20.04
            target: mips64el-unknown-linux-muslabi64
            bin: precious
            name: precious-Linux-mips64el.tar.gz
            skip_tests: true
          - os_name: Linux-powerpc
            os: ubuntu-20.04
            target: powerpc-unknown-linux-gnu
            bin: precious
            name: precious-Linux-powerpc-gnu.tar.gz
            skip_tests: true
          - os_name: Linux-powerpc64
            os: ubuntu-20.04
            target: powerpc64-unknown-linux-gnu
            bin: precious
            name: precious-Linux-powerpc64-gnu.tar.gz
            skip_tests: true
          - os_name: Linux-powerpc64le
            os: ubuntu-20.04
            target: powerpc64le-unknown-linux-gnu
            bin: precious
            name: precious-Linux-powerpc64le.tar.gz
            skip_tests: true
          - os_name: Linux-riscv64
            os: ubuntu-20.04
            target: riscv64gc-unknown-linux-gnu
            bin: precious
            name: precious-Linux-riscv64gc-gnu.tar.gz
          - os_name: Linux-s390x
            os: ubuntu-20.04
            target: s390x-unknown-linux-gnu
            bin: precious
            name: precious-Linux-s390x-gnu.tar.gz
            skip_tests: true
          - os_name: NetBSD-x86_64
            os: ubuntu-20.04
            target: x86_64-unknown-netbsd
            bin: precious
            name: precious-NetBSD-x86_64.tar.gz
            skip_tests: true
          - os_name: Windows-aarch64
            os: windows-latest
            target: aarch64-pc-windows-msvc
            bin: precious.exe
            name: precious-Windows-aarch64.zip
            skip_tests: true
          - os_name: Windows-i686
            os: windows-latest
            target: i686-pc-windows-msvc
            bin: precious.exe
            name: precious-Windows-i686.zip
            skip_tests: true
          - os_name: Windows-x86_64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            bin: precious.exe
            name: precious-Windows-x86_64.zip
          - os_name: macOS-x86_64
            os: macOS-latest
            target: x86_64-apple-darwin
            bin: precious
            name: precious-Darwin-x86_64.tar.gz
          - os_name: macOS-aarch64
            os: macOS-latest
            target: aarch64-apple-darwin
            bin: precious
            name: precious-Darwin-aarch64.tar.gz
            skip_tests: true
        toolchain:
          - stable
          - beta
          - nightly
    # container:
    #   image: docker://ghcr.io/rust-cross/rust-musl-cross:${{ matrix.platform.image_tag }}
    #   env:
    #     CFLAGS_armv7_unknown_linux_musleabihf: '-mfpu=vfpv3-d16'
    steps:
      - uses: actions/checkout@v3
      - name: Install ssl, musl & protobuf
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev musl-tools protobuf-compiler
      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          target: ${{ matrix.platform.target }}    
      
      - name: Build binary
        uses: houseabsolute/actions-rust-cross@v0
        with:
          command: "build"
          target: ${{ matrix.platform.target }}
          toolchain: 'stable'
          args: "--locked --release"
          strip: true
    #   - name: Upload wheels
    #     uses: actions/upload-artifact@v3
    #     with:
    #       name: wheels
    #       path: dist
    #   - name: Upload binary artifacts
    #     uses: actions/upload-artifact@v3
    #     with:
    #       name: ${{ matrix.platform.target }}-bin
    #       path: target/${{ matrix.platform.target }}/release/cargo-zigbuild
    #       if-no-files-found: error
    #   - name: Get tag
    #     if: "startsWith(github.ref, 'refs/tags/')"
    #     id: tag
    #     uses: dawidd6/action-get-tag@v1
    #   - name: Archive binary
    #     if: "startsWith(github.ref, 'refs/tags/')"
    #     run: |
    #       cd target/${{ matrix.platform.target }}/release
    #       tar czvf cargo-zigbuild-${{ steps.tag.outputs.tag }}.${{ matrix.platform.target }}.tar.gz cargo-zigbuild
    #       shasum -a 256 cargo-zigbuild-${{ steps.tag.outputs.tag }}.${{ matrix.platform.target }}.tar.gz > cargo-zigbuild-${{ steps.tag.outputs.tag }}.${{ matrix.platform.target }}.tar.gz.sha256
    #       cd -
    #   - name: Upload binary to GitHub Release
    #     if: "startsWith(github.ref, 'refs/tags/')"
    #     uses: softprops/action-gh-release@v1
    #     with:
    #       files: |
    #         target/${{ matrix.platform.target }}/release/cargo-zigbuild*.tar.gz*
    #       prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') }}
    #       generate_release_notes: true

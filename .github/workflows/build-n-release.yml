name: Build & Release

on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ master ]

jobs:
  release:
    name: Release - ${{ matrix.platform.os_name }}
    runs-on: ${{ matrix.platform.os }}
    strategy:
      matrix:
        platform:
          - os_name: FreeBSD-x86_64
            os: ubuntu-20.04
            target: x86_64-unknown-freebsd
            name: FreeBSD-x86_64.tar.gz
            cross: true
            cargo_command: ./cross

        #   - os_name: Linux-x86_64-musl
        #     os: ubuntu-20.04
        #     target: x86_64-unknown-linux-musl
        #     name: Linux-x86_64-musl.tar.gz
        #     cross: false
        #     cargo_command: cargo
          
        #   - os_name: Linux-x86_64-gnu
        #     os: ubuntu-20.04
        #     target: x86_64-unknown-linux-gnu
        #     name: Linux-x86_64-gnu.tar.gz
        #     cross: false
        #     cargo_command: cargo

          - os_name: Linux-arm-gnueabi
            os: ubuntu-latest
            target: arm-unknown-linux-gnueabi
            name: Linux-arm-gnueabi.tar.gz
            cross: true
            cargo_command: ./cross

        #   - os_name: Linux-armv7-gnueabihf
        #     os: ubuntu-20.04
        #     target: armv7-unknown-linux-gnueabihf 
        #     name: Linux-armv7-gnueabihf.tar.gz
        #     cross: true
        #     cargo_command: cargo
    steps:
      - name: Checkout
        uses: actions/checkout@v3
    #   - name: Install toolchain if not cross-compiling
    #     uses: actions-rs/toolchain@v1
    #     with:
    #       toolchain: stable
    #       components: rustfmt
    #       profile: minimlinal
    #       override: true
    #     if: ${{ !matrix.platform.cross }}
      - name: Install musl-tools on Linux
        run: sudo apt-get update --yes && sudo apt-get install --yes pkg-config libssl-dev musl-tools protobuf-compiler
    #     if: contains(matrix.platform.os, 'ubuntu') && !matrix.platform.cross
      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          target: ${{ matrix.platform.target }}    
      - name: Build binary
        uses: houseabsolute/actions-rust-cross@v0
        with:
          command: "build"
          target: ${{ matrix.platform.target }}
          toolchain: 'stable'
          args: "--locked --release"
          strip: true
    #   - name: Install cross if cross-compiling (*nix)
    #     id: cross-nix
    #     shell: bash
    #     run: |
    #       set -e
    #       export TARGET="$HOME/bin"
    #       mkdir -p "$TARGET"
    #     #   ./bootstrap/bootstrap-ubi.sh
    #       "$HOME/bin/ubi" --project cross-rs/cross --matching musl --in .          
    #     if: matrix.platform.cross && !contains(matrix.platform.os, 'windows')
    #   - name: Install cross if cross-compiling (Windows)
    #     id: cross-windows
    #     shell: powershell
    #     run: |
    #       .\bootstrap\bootstrap-ubi.ps1
    #       .\ubi --project cross-rs/cross --in .          
    #     if: matrix.platform.cross && contains(matrix.platform.os, 'windows')
    #   - name: Build binary (*nix)
    #     shell: bash
    #     run: |
    #                 ${{ matrix.platform.cargo_command }} build --locked --release --target ${{ matrix.platform.target }}
    #     if: ${{ !contains(matrix.platform.os, 'windows') }}
    #   - name: Build binary (Windows)
    #     # We have to use the platform's native shell. If we use bash on
    #     # Windows then OpenSSL complains that the Perl it finds doesn't use
    #     # the platform's native paths and refuses to build.
    #     shell: powershell
    #     run: |
    #                 & ${{ matrix.platform.cargo_command }} build --locked --release --target ${{ matrix.platform.target }}
    #     if: contains(matrix.platform.os, 'windows')
    #   - name: Strip binary
    #     shell: bash
    #     run: |
    #                 strip target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }}
    #     # strip doesn't work with cross-arch binaries on Linux or Windows.
    #     if: ${{ !(matrix.platform.cross || matrix.platform.target == 'aarch64-pc-windows-msvc') }}
    #   - name: Package as archive
    #     shell: bash
    #     run: |
    #       cd target/${{ matrix.platform.target }}/release
    #       if [[ "${{ matrix.platform.os }}" == "windows-latest" ]]; then
    #         7z a ../../../${{ matrix.platform.name }} ${{ matrix.platform.bin }}
    #       else
    #         tar czvf ../../../${{ matrix.platform.name }} ${{ matrix.platform.bin }}
    #       fi
    #       cd -          
    #   - name: Publish release artifacts
    #     uses: actions/upload-artifact@v3
    #     with:
    #       name: ubi-${{ matrix.platform.os_name }}
    #       path: "ubi*"
    #     if: github.ref == 'refs/tags/test-release'
    #   - name: Publish GitHub release
    #     uses: softprops/action-gh-release@v1
    #     with:
    #       draft: true
    #       files: "ubi*"
    #       body_path: Changes.md
    #     if: startsWith( github.ref, 'refs/tags/v' )